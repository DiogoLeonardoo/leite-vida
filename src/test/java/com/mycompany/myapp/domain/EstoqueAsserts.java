package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EstoqueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstoqueAllPropertiesEquals(Estoque expected, Estoque actual) {
        assertEstoqueAutoGeneratedPropertiesEquals(expected, actual);
        assertEstoqueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstoqueAllUpdatablePropertiesEquals(Estoque expected, Estoque actual) {
        assertEstoqueUpdatableFieldsEquals(expected, actual);
        assertEstoqueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstoqueAutoGeneratedPropertiesEquals(Estoque expected, Estoque actual) {
        assertThat(actual)
            .as("Verify Estoque auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstoqueUpdatableFieldsEquals(Estoque expected, Estoque actual) {
        assertThat(actual)
            .as("Verify Estoque relevant properties")
            .satisfies(a -> assertThat(a.getDataProducao()).as("check dataProducao").isEqualTo(expected.getDataProducao()))
            .satisfies(a -> assertThat(a.getDataValidade()).as("check dataValidade").isEqualTo(expected.getDataValidade()))
            .satisfies(a -> assertThat(a.getTipoLeite()).as("check tipoLeite").isEqualTo(expected.getTipoLeite()))
            .satisfies(a -> assertThat(a.getClassificacao()).as("check classificacao").isEqualTo(expected.getClassificacao()))
            .satisfies(a -> assertThat(a.getVolumeTotalMl()).as("check volumeTotalMl").isEqualTo(expected.getVolumeTotalMl()))
            .satisfies(a -> assertThat(a.getVolumeDisponivelMl()).as("check volumeDisponivelMl").isEqualTo(expected.getVolumeDisponivelMl())
            )
            .satisfies(a -> assertThat(a.getLocalArmazenamento()).as("check localArmazenamento").isEqualTo(expected.getLocalArmazenamento())
            )
            .satisfies(a ->
                assertThat(a.getTemperaturaArmazenamento())
                    .as("check temperaturaArmazenamento")
                    .isEqualTo(expected.getTemperaturaArmazenamento())
            )
            .satisfies(a -> assertThat(a.getStatusLote()).as("check statusLote").isEqualTo(expected.getStatusLote()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstoqueUpdatableRelationshipsEquals(Estoque expected, Estoque actual) {
        // empty method
    }
}
