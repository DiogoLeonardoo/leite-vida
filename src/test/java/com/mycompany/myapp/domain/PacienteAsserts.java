package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PacienteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteAllPropertiesEquals(Paciente expected, Paciente actual) {
        assertPacienteAutoGeneratedPropertiesEquals(expected, actual);
        assertPacienteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteAllUpdatablePropertiesEquals(Paciente expected, Paciente actual) {
        assertPacienteUpdatableFieldsEquals(expected, actual);
        assertPacienteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteAutoGeneratedPropertiesEquals(Paciente expected, Paciente actual) {
        assertThat(actual)
            .as("Verify Paciente auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteUpdatableFieldsEquals(Paciente expected, Paciente actual) {
        assertThat(actual)
            .as("Verify Paciente relevant properties")
            .satisfies(a -> assertThat(a.getNome()).as("check nome").isEqualTo(expected.getNome()))
            .satisfies(a -> assertThat(a.getRegistroHospitalar()).as("check registroHospitalar").isEqualTo(expected.getRegistroHospitalar())
            )
            .satisfies(a -> assertThat(a.getDataNascimento()).as("check dataNascimento").isEqualTo(expected.getDataNascimento()))
            .satisfies(a -> assertThat(a.getPesoNascimento()).as("check pesoNascimento").isEqualTo(expected.getPesoNascimento()))
            .satisfies(a -> assertThat(a.getIdadeGestacional()).as("check idadeGestacional").isEqualTo(expected.getIdadeGestacional()))
            .satisfies(a -> assertThat(a.getCondicaoClinica()).as("check condicaoClinica").isEqualTo(expected.getCondicaoClinica()))
            .satisfies(a -> assertThat(a.getNomeResponsavel()).as("check nomeResponsavel").isEqualTo(expected.getNomeResponsavel()))
            .satisfies(a -> assertThat(a.getCpfResponsavel()).as("check cpfResponsavel").isEqualTo(expected.getCpfResponsavel()))
            .satisfies(a ->
                assertThat(a.getTelefoneResponsavel()).as("check telefoneResponsavel").isEqualTo(expected.getTelefoneResponsavel())
            )
            .satisfies(a ->
                assertThat(a.getParentescoResponsavel()).as("check parentescoResponsavel").isEqualTo(expected.getParentescoResponsavel())
            )
            .satisfies(a -> assertThat(a.getStatusAtivo()).as("check statusAtivo").isEqualTo(expected.getStatusAtivo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteUpdatableRelationshipsEquals(Paciente expected, Paciente actual) {
        // empty method
    }
}
